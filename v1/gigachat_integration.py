from gigachat import GigaChat
from gigachat.models import Messages, MessagesRole, Chat
from typing import List, Dict, Any
from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QTextEdit, QPushButton,
                           QLabel, QMessageBox, QProgressBar, QHBoxLayout,
                           QComboBox, QLineEdit)
from PyQt5.QtCore import Qt, QThread, pyqtSignal
from datetime import datetime, timedelta
import requests
import urllib3
import uuid
import git
import os
from PyQt5.QtCore import QSettings

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

PROMPT_TEMPLATE = """–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —É—Ä–æ–≤–Ω—è Senior –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Ä–µ—Ü–µ–Ω–∑–µ–Ω—Ç.  
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å—Ç—Ä–æ–≥–æ –∏ —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–ø–æ–ª–Ω–∏–ª –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–º –∑–∞–¥–∞—á—É,  
–æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å **–∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–µ –∑–∞–¥–∞—á–∏ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º –∫–æ–º–º–∏—Ç–æ–≤**.

---

üîπ –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏:
"{user_task}"

üîπ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–º–º–∏—Ç–æ–≤:
{commit_list}

---

üîç –ü—Ä–∞–≤–∏–ª–∞ –∞–Ω–∞–ª–∏–∑–∞:
1. **–û—Ü–µ–Ω–∏–≤–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–µ –∑–∞–¥–∞—á–∏**. –ù–µ –¥–æ–¥—É–º—ã–≤–∞–π, —á—Ç–æ ¬´–Ω–∞–≤–µ—Ä–Ω–æ–µ –∏–º–µ–ª–æ—Å—å –≤ –≤–∏–¥—É¬ª.  
2. –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Ç—Ä–µ–±—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞, –ø–æ–≤–µ–¥–µ–Ω–∏—è, —Ñ–∞–π–ª–∞ –∏–ª–∏ —Ä–µ—Å—É—Ä—Å–∞ ‚Äî –ø—Ä–æ–≤–µ—Ä—è–π —ç—Ç–æ **–±—É–∫–≤–∞–ª—å–Ω–æ**.
3. **–ù–µ —É—á–∏—Ç—ã–≤–∞–π –Ω–∞–º–µ—Ä–µ–Ω–∏—è**. –û—Ü–µ–Ω–∏ —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –∫–æ–¥–µ/–∫–æ–º–º–∏—Ç–∞—Ö.
4. –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ ‚Äî –æ—Ü–µ–Ω–∏ **–ø–æ –¥–æ–ª–µ —Å—É—Ç–∏, –∞ –Ω–µ –ø–æ –¥–ª–∏–Ω–µ –∫–æ–¥–∞**.
5. –ù–µ —Å–Ω–∏–∂–∞–π –æ—Ü–µ–Ω–∫—É –∑–∞ —Å—Ç–∏–ª—å, —Å—Ç—Ä—É–∫—Ç—É—Ä—É, —Ç–µ—Å—Ç—ã –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∏ **–Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è –≤ –∑–∞–¥–∞—á–µ**.
6. –ï—Å–ª–∏ –∫–æ–º–º–∏—Ç—ã –Ω–µ –¥–µ–ª–∞—é—Ç –Ω–∏—á–µ–≥–æ –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–≥–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `print()` –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤) ‚Äî —ç—Ç–æ 0%.

---

üîÅ –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
–û—Ü–µ–Ω–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: [–ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç 0 –¥–æ 100]%

–ö—Ä–∞—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:
- –ß—Ç–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ: [–ø–µ—Ä–µ—á–∏—Å–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã]
- –ß–µ–≥–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç: [–ø–µ—Ä–µ—á–∏—Å–ª–∏, —á—Ç–æ –∏–∑ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–º–º–∏—Ç–∞—Ö]
- –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: [–æ–±—ä—è—Å–Ω–∏ –æ—Ü–µ–Ω–∫—É –ª–æ–≥–∏—á–µ—Å–∫–∏, –Ω–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è —Å–∫—Ä—ã—Ç–æ–≥–æ —Å–º—ã—Å–ª–∞]
"""

def create_message(role: str, content: str) -> Dict[str, str]:
    return {"role": role, "content": content}

class GitAnalyzer:
    def __init__(self, repo_path="."):
        try:
            self.repo = git.Repo(repo_path)
        except git.exc.InvalidGitRepositoryError:
            try:
                self.repo = git.Repo.init(repo_path)
                if not self.repo.heads:
                    readme_path = os.path.join(repo_path, "README.md")
                    with open(readme_path, "w", encoding='utf-8') as f:
                        f.write("# –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞\n\n–ü—Ä–æ–µ–∫—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.")
                    self.repo.index.add(["README.md"])
                    self.repo.index.commit("Initial commit")
            except Exception as e:
                raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {str(e)}")

    def get_commits_for_period(self, days=1):
        try:
            since_date = datetime.now() - timedelta(days=days)
            
            if not self.repo.heads:
                return []
                
            commits = list(self.repo.iter_commits(since=since_date))
            
            commit_info = []
            for commit in commits:
                try:
                    files_changed = []
                    if commit.parents:
                        for diff in commit.diff(commit.parents[0]):
                            if diff.a_path:
                                files_changed.append(diff.a_path)
                            if diff.b_path and diff.b_path != diff.a_path:
                                files_changed.append(diff.b_path)
                    else:
                        files_changed = [item.path for item in commit.tree.traverse()]

                    commit_info.append({
                        'hash': commit.hexsha[:8],
                        'author': commit.author.name,
                        'date': commit.committed_datetime.strftime('%Y-%m-%d %H:%M:%S'),
                        'message': commit.message.strip(),
                        'files_changed': files_changed
                    })
                except Exception:
                    continue
            
            return commit_info
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–º–∏—Ç–æ–≤: {str(e)}")

    def get_file_content_at_commit(self, file_path, commit_hash):
        try:
            return self.repo.git.show(f'{commit_hash}:{file_path}')
        except git.exc.GitCommandError:
            return None
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞: {str(e)}")

class GigaChatWorker(QThread):
    finished = pyqtSignal(str)
    error = pyqtSignal(str)

    def __init__(self, auth_key, task, period):
        super().__init__()
        self.auth_key = auth_key
        self.task = task
        self.period = period
        self.model = "GigaChat"  # Default model
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            settings = QSettings("MyCompany", "DevMetricsApp")
            project_path = settings.value("project_path", "")
            if not project_path:
                raise Exception("–ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º GitAnalyzer —Å –ø—É—Ç–µ–º –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            self.git_analyzer = GitAnalyzer(project_path)
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Git: {str(e)}")

    def set_model(self, model_name):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ."""
        self.model = model_name

    def get_access_token(self) -> str:
        url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
        
        headers = {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Accept': 'application/json',
            'RqUID': str(uuid.uuid4()),
            'Authorization': f'Basic {self.auth_key}'
        }
        
        payload = {
            'scope': 'GIGACHAT_API_PERS'
        }
        
        try:
            response = requests.post(url, headers=headers, data=payload, verify=False)
            response.raise_for_status()
            return response.json().get('access_token')
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è access token: {str(e)}")

    def format_commits_info(self, commits):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∫–æ–º–º–∏—Ç–µ, –≤–∫–ª—é—á–∞—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤."""
        if not commits:
            return "–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."
        
        last_commit = commits[0]  # –ü–µ—Ä–≤—ã–π –≤ —Å–ø–∏—Å–∫–µ ‚Äî —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π
        formatted_info = "–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç:\n"
        formatted_info += f"–ö–æ–º–º–∏—Ç: {last_commit['hash']}\n"
        formatted_info += f"–ê–≤—Ç–æ—Ä: {last_commit['author']}\n"
        formatted_info += f"–î–∞—Ç–∞: {last_commit['date']}\n"
        formatted_info += f"–°–æ–æ–±—â–µ–Ω–∏–µ: {last_commit['message']}\n"
        formatted_info += "–ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:\n"
        for file in last_commit['files_changed']:
            formatted_info += f"- {file}\n"
            try:
                content = self.git_analyzer.get_file_content_at_commit(file, last_commit['hash'])
                if content:
                    lines = content.splitlines()
                    preview = '\n'.join(lines[:30])
                    if len(lines) > 30:
                        preview += f"\n... (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 30 —Å—Ç—Ä–æ–∫ –∏–∑ {len(lines)})"
                    formatted_info += f"  –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç –∫–æ–º–º–∏—Ç–∞:\n{preview}\n"
            except Exception as e:
                formatted_info += f"  [–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞: {str(e)}]\n"
        return formatted_info

    def run(self):
        try:
            days = self.get_period_days()
            commits = self.git_analyzer.get_commits_for_period(days)
            commits_info = self.format_commits_info(commits)

            prompt = PROMPT_TEMPLATE.format(
                user_task=self.task,
                commit_list=commits_info
            )

            access_token = self.get_access_token()
            url = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"
            
            payload = {
                "model": self.model,
                "messages": [
                    create_message("system", "–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç —É—Ä–æ–≤–Ω—è Senior –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–µ—Ä—Ç. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–¥–∞—á–∏ —Å—Ç—Ä–æ–≥–æ –ø–æ –∏—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–µ."),
                    create_message("user", prompt)
                ],
                "temperature": 0.7,
                "max_tokens": 2000
            }
            
            headers = {
                'Content-Type': 'application/json',
                'Authorization': f'Bearer {access_token}'
            }
            
            response = requests.post(url, json=payload, headers=headers, verify=False)
            response.raise_for_status()
            
            response_data = response.json()
            if 'choices' in response_data and response_data['choices']:
                content = response_data['choices'][0]['message']['content']
            else:
                content = str(response_data)
                
            self.finished.emit(content)
        except Exception as e:
            self.error.emit(str(e))

    def get_period_days(self):
        period_mapping = {
            "–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å": 1,
            "–ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–µ–¥–µ–ª—è": 7,
            "–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü": 30,
            "–í–µ—Å—å –ø–µ—Ä–∏–æ–¥": 365
        }
        return period_mapping.get(self.period, 1)

class GigaChatPanel(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.parent = parent
        self.auth_key = None
        self.settings = QSettings("MyCompany", "DevMetricsApp")
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout(self)
        settings_group = QVBoxLayout()
        
        auth_layout = QHBoxLayout()
        auth_layout.addWidget(QLabel("API –ö–ª—é—á GigaChat:"))
        self.auth_key_input = QLineEdit()
        self.auth_key_input.setEchoMode(QLineEdit.Password)
        self.auth_key_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á GigaChat...")
        auth_layout.addWidget(self.auth_key_input)
        settings_group.addLayout(auth_layout)

        model_layout = QHBoxLayout()
        model_layout.addWidget(QLabel("–ú–æ–¥–µ–ª—å:"))
        self.model_selector = QComboBox()
        self.model_selector.addItems(["GigaChat", "GigaChat-Pro", "GigaChat-Max"])
        model_layout.addWidget(self.model_selector)
        settings_group.addLayout(model_layout)

        init_button = QPushButton("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å GigaChat")
        init_button.clicked.connect(self.initialize_gigachat)
        settings_group.addWidget(init_button)

        layout.addLayout(settings_group)

        self.task_label = QLabel("–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
        layout.addWidget(self.task_label)
        
        self.task_text = QTextEdit()
        self.task_text.setPlaceholderText("–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å...")
        self.task_text.setMaximumHeight(100)
        layout.addWidget(self.task_text)

        period_layout = QHBoxLayout()
        period_layout.addWidget(QLabel("–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞:"))
        
        self.period_selector = QComboBox()
        self.period_selector.addItems(["–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å", "–ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–µ–¥–µ–ª—è", "–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü", "–í–µ—Å—å –ø–µ—Ä–∏–æ–¥"])
        period_layout.addWidget(self.period_selector)
        period_layout.addStretch()
        layout.addLayout(period_layout)

        self.analyze_button = QPushButton("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
        self.analyze_button.clicked.connect(self.analyze_task)
        self.analyze_button.setEnabled(False)
        layout.addWidget(self.analyze_button)

        self.progress = QProgressBar()
        self.progress.setVisible(False)
        layout.addWidget(self.progress)

        self.response_label = QLabel("–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
        layout.addWidget(self.response_label)
        
        self.response_text = QTextEdit()
        self.response_text.setReadOnly(True)
        self.response_text.setPlaceholderText("–ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏...")
        layout.addWidget(self.response_text)

        # --- –ù–æ–≤—ã–π –∫–æ–¥: –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–∞ ---
        saved_key = self.settings.value("gigachat_api_key", "")
        if saved_key:
            self.auth_key_input.setText(saved_key)
            self.auth_key = saved_key
            self.analyze_button.setEnabled(True)
        else:
            self.analyze_button.setEnabled(False)

    def initialize_gigachat(self):
        auth_key = self.auth_key_input.text().strip()
        if not auth_key:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á GigaChat.")
            return

        try:
            self.auth_key = auth_key
            worker = GigaChatWorker(self.auth_key, "", "")
            test_token = worker.get_access_token()
            
            if test_token:
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", "GigaChat —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
                self.analyze_button.setEnabled(True)
                # --- –ù–æ–≤—ã–π –∫–æ–¥: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á ---
                self.settings.setValue("gigachat_api_key", self.auth_key)
                self.settings.sync()
            else:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞")
            
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å GigaChat: {str(e)}")
            self.auth_key = None
            self.analyze_button.setEnabled(False)

    def analyze_task(self):
        if not self.auth_key:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                              "GigaChat –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á.")
            return

        task = self.task_text.toPlainText().strip()
        if not task:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.")
            return

        period = self.period_selector.currentText()
        model = self.model_selector.currentText()
        
        self.progress.setVisible(True)
        self.analyze_button.setEnabled(False)
        
        self.worker = GigaChatWorker(self.auth_key, task, period)
        self.worker.set_model(model)
        self.worker.finished.connect(self.handle_response)
        self.worker.error.connect(self.handle_error)
        self.worker.finished.connect(lambda: self.cleanup_ui())
        self.worker.error.connect(lambda: self.cleanup_ui())
        self.worker.start()

    def handle_response(self, response):
        self.response_text.setText(response)

    def handle_error(self, error_message):
        QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {error_message}")

    def cleanup_ui(self):
        self.progress.setVisible(False)
        self.analyze_button.setEnabled(True)